source('~/R/Coursera_Practical_Machine_Learning/Code.R')
summary(training)
View(training)
training$kurtosis_roll_belt
training$kurtosis_roll_belt[1]
source('~/R/Coursera_Practical_Machine_Learning/Code.R')
View(training)
aaa <- summary(training)
summary(training)
library(VIM)
aggr(training,numbers=TRUE)
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
DF
na.omit(DF)
na.fail(DF)
na.exclude(DF)
na.pass(DF)
summary(training[1])
summary(training[2])
summary(training[10])
summary(training[112])
summary(training[20])
summary(training[20])[1]
summary(training[20])[2]
summary(training[20])[6]
summary(training[20])[7]
summary
aaa <- t(training)
View(aaa)
bbb <- na.omit(aaa)
View(bbb)
ccc <- t(bbb)
View(ccc)
ccc <- as.data.frame(ccc)
View(ccc)
clean_training <- as.data.frame(t(na.omit(t(training))))
View(clean_training)
names(clean_training)
aaa <- testing[, names(clean_training)]
View(aaa)
View(testing)
source('~/R/Coursera_Practical_Machine_Learning/Code.R')
names(clean_training)
testing
names(testing)
names(clean_training)
testing[, names(clean_training)[1]]
testing[, names(clean_training)[1:10]]
testing[, names(clean_training)[1:20]]
testing[, names(clean_training)[1:30]]
testing[, names(clean_training)[1:40]]
testing[, names(clean_training)[1:50]]
testing[, names(clean_training)[1:60]]
testing[, names(clean_training)[1:59]]
length(clean_training)
source('~/R/Coursera_Practical_Machine_Learning/Code.R')
clean_training <- clean_training[, -1]
clean_testing  <- clean_testing [, -1]
View(clean_testing)
View(clean_training)
View(testing)
View(testing)
View(training)
clean_training$classe
inTraining  <- createDataPartition(clean_training$classe, p = 0.75, list = FALSE)
inTraining
cv_training <- clean_training[ inTraining, ]
cv_testing  <- clean_training[-inTraining, ]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
set.seed(825)
gbmFit1 <- train(Class ~ ., data = cv_training, method = "gbm", trControl = fitControl, verbose = FALSE)
str(cv_training)
str(training)
str(cv_training)
gbmFit1 <- train(classe ~ ., data = cv_training, method = "gbm", trControl = fitControl, verbose = FALSE)
gbmFit1 <- train(classe ~ ., data = cv_training, method = "rf", trControl = fitControl, verbose = FALSE)
source('~/R/Coursera_Practical_Machine_Learning/Code.R')
fitControl <- trainControl(method = "repeatedcv", number = 4, repeats = 4)
gbmFit1 <- train(classe ~ ., data = cv_training, method = "gbm", trControl = fitControl, verbose = FALSE)
gbmFit1 <- train(classe ~ ., data = cv_training[1:100,], method = "gbm", trControl = fitControl, verbose = FALSE)
gbmFit1 <- train(classe ~ ., data = cv_training[1:10,], method = "gbm", trControl = fitControl, verbose = FALSE)
aaa <- t(na.omit(t(training)))
str(aaa)
as.data.frame(t(na.omit(t(training[1:100,]))))
names(as.data.frame(t(na.omit(t(training[1:100,])))))
element <- names(as.data.frame(t(na.omit(t(training[1:100,])))))
library(caret)
training <- read.csv('pml-training.csv',header=T,dec='.',na.strings=c('NA', ''))
testing  <- read.csv('pml-testing.csv', header=T,dec='.',na.strings=c('NA', ''))
element_name   <- names(as.data.frame(t(na.omit(t(training[1:100,])))))
clean_training <- testing[, element_name[-length(element_name)] ]
element_name
clean_training <- testing[, element_name[        element_name ] ]
library(caret)
training <- read.csv('pml-training.csv',header=T,dec='.',na.strings=c('NA', ''))
testing  <- read.csv('pml-testing.csv', header=T,dec='.',na.strings=c('NA', ''))
element_name   <- names(as.data.frame(t(na.omit(t(training)))))
clean_training <- training[, element_name]
clean_testing  <- testing [, element_name[-length(element_name)]]
clean_training <- clean_training[, -1]
clean_testing  <- clean_testing [, -1]
set.seed(998)
inTraining  <- createDataPartition(clean_training$classe, p = 0.75, list = FALSE)
cv_training <- clean_training[ inTraining, ]
cv_testing  <- clean_training[-inTraining, ]
fitControl <- trainControl(method = "repeatedcv", number = 2, repeats = 2)
set.seed(825)
gbmFit <- train(classe ~ ., data = cv_training, method = "gbm", trControl = fitControl, verbose = TRUE)
gbmFit
set.seed(825)
svmFit <- train(Class ~ ., data = training, method = "svmRadial", trControl = fitControl,
preProc = c("center", "scale"), tuneLength = 8, metric = "ROC", verbose = TRUE)
set.seed(825)
svmFit <- train(classe ~ ., data = cv_training, method = "svmRadial", trControl = fitControl,
preProc = c("center", "scale"), tuneLength = 8, metric = "ROC", verbose = TRUE)
gbmFit <- train(classe ~ ., data = cv_training, method = "gbm", trControl = fitControl, metric = "ROC", verbose = TRUE)
set.seed(825)
svmFit <- train(classe ~ ., data = cv_training, method = "svmRadial", trControl = fitControl,
preProc = c("center", "scale"), tuneLength = 8, verbose = TRUE)
library(caret)
training <- read.csv('pml-training.csv',header=T,dec='.',na.strings=c('NA', ''))
testing  <- read.csv('pml-testing.csv', header=T,dec='.',na.strings=c('NA', ''))
element_name   <- names(as.data.frame(t(na.omit(t(training)))))
clean_training <- training[, element_name]
clean_testing  <- testing [, element_name[-length(element_name)]]
clean_training <- clean_training[, -1]
clean_testing  <- clean_testing [, -1]
set.seed(998)
inTraining  <- createDataPartition(clean_training$classe, p = 0.75, list = FALSE)
cv_training <- clean_training[ inTraining, ]
cv_testing  <- clean_training[-inTraining, ]
fitControl <- trainControl(method = "repeatedcv", number = 2, repeats = 2)
set.seed(825)
gbmFit <- train(classe ~ ., data = cv_training, method = "gbm", trControl = fitControl, verbose = TRUE)
set.seed(825)
rdaFit <- train(classe ~ ., data = cv_training, method = "rda", trControl = fitControl,  verbose = TRUE)
set.seed(825)
rdaFit <- train(classe ~ ., data = cv_training, method = "rda", trControl = fitControl,  verboseIter = TRUE)
fitControl <- trainControl(method = "repeatedcv", number = 2, repeats = 2, verboseIter=T)
set.seed(825)
rdaFit <- train(classe ~ ., data = cv_training, method = "rda", trControl = fitControl,  verbose = TRUE)
set.seed(825)
svmFit <- train(classe ~ ., data = cv_training, method = "svmRadial", trControl = fitControl, verbose = TRUE)
gbmFit
svmFit
set.seed(825)
RRFFit <- train(classe ~ ., data = cv_training, method = "RRF", trControl = fitControl, verbose = TRUE)
set.seed(825)
blackboost_Fit <- train(classe ~ ., data = cv_training, method = "blackboost", trControl = fitControl, verbose = TRUE)
set.seed(825)
ada_Fit <- train(classe ~ ., data = cv_training, method = "ada", trControl = fitControl, verbose = TRUE)
set.seed(825)
gamboost_Fit <- train(classe ~ ., data = cv_training, method = "gamboost", trControl = fitControl, verbose = TRUE)
set.seed(825)
gamboost_Fit <- train(classe ~ ., data = cv_training, method = "gamboost", trControl = fitControl, verbose = TRUE)
set.seed(825)
gbm_Fit <- train(classe ~ ., data = cv_training, method = "gbm", trControl = fitControl, verbose = TRUE)
gbm_Fit
set.seed(825)
RRF_Fit <- train(classe ~ ., data = cv_training, method = "RRF", trControl = fitControl, verbose = TRUE)
gbm_Fit
trellis.par.set(caretTheme())
plot(gbm_Fit, metric = "Accuracy")
trellis.par.set(caretTheme())
plot(gbm_Fit, metric = "Kappa")
ggplot(gbmFit2)
ggplot(gbm_Fit)
gbm_Fit$results
whichTwoPct <- tolerance(gbm_Fit$results, metric = "ROC", tol = 2, maximize = TRUE)
whichTwoPct <- tolerance(gbm_Fit$results, metric = "Accuracy", tol = 2, maximize = TRUE)
whichTwoPct
gbm_Fit$results[whichTwoPct, 1:6]
gbm_Fit$method
gbm_Fit$modelInfo
gbm_Fit$modelType
gbm_Fit$results
gbm_Fit$pred
gbm_Fit$bestTune
gbm_Fit$maximize
gbm_Fit$finalModel
set.seed(825)
fitControl <- trainControl(method = "none", classProbs = TRUE, verboseIter=T)
gbm_Fit_Final <- train(classe ~ ., data = cv_training, method = "gbm", trControl = fitControl,
verbose = TRUE, tuneGrid = gbm_Fit$bestTune)
predict(gbm_Fit_Final, newdata = head(testing))
predict(gbm_Fit$finalModel, newdata = head(testing))
gbm_Fit$finalModel
predict(gbm_Fit_Final, newdata = head(cv_testing))
head(cv_testing$classe)
pred <- predict(gbm_Fit_Final, newdata = head(cv_testing))
obs  <- head(cv_testing)
defaultSummary(data = data.frame(obs=obs, pred=pred))
data.frame(obs=obs, pred=pred)
pred
obs <-  head(cv_testing$classe)
obs
defaultSummary(data = data.frame(obs=obs, pred=pred))
pred <- predict(gbm_Fit_Final, newdata = cv_testing)
obs <-  cv_testing$classe
defaultSummary(data = data.frame(obs=obs, pred=pred))
set.seed(825)
fitControl <- trainControl(method = "none", classProbs = TRUE, verboseIter=T)
gbm_Fit_Final <- train(classe ~ ., data = clean_training, method = "gbm", trControl = fitControl,
verbose = TRUE, tuneGrid = gbm_Fit$bestTune)
pred  <- predict(gbm_Fit_Final, newdata = clean_testing)
pred
source('~/R/Coursera_Practical_Machine_Learning/Code.R')
dim(clean_training)[2]
gbm_Fit$bestTune
metric
names(metric)
names(metric)[1]
metric[1]
save.image("~/R/Coursera_Practical_Machine_Learning/ddd.RData")
library(caret)
element_name   <- names(as.data.frame(t(na.omit(t(training)))))
clean_training <- training[, element_name]
clean_testing  <- testing [, element_name[-length(element_name)]]
clean_training <- clean_training[, -1]
clean_testing  <- clean_testing [, -1]
library(caret)
element_name   <- names(as.data.frame(t(na.omit(t(training)))))
clean_training <- training[, element_name]
clean_testing  <- testing [, element_name[-length(element_name)]]
clean_training <- clean_training[, -1]
clean_testing  <- clean_testing [, -1]
